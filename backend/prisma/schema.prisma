// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
}

enum Department {
  CE
  CSE
  IT
}

enum Institute {
  CSPIT
  DEPSTAR
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model User {
  id         String     @id @unique @default(uuid())
  email      String     @unique
  name       String
  password   String
  role       UserRole   @default(STUDENT)
  department Department
  institute  Institute
  Student    Student[]  @relation("StudentRef")
  Faculty    Faculty[]  @relation("FacultyRef")
  Admin      Admin[]    @relation("AdminRef")

  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
}

model Student {
  id                 String               @id @unique @default(uuid())
  user               User                 @relation("StudentRef", fields: [userId], references: [id])
  userId             String               @unique
  current_study_year String
  passing_year       String
  batch              String
  resetId            Int                  @default(1)
  teamHistory        StudentTeamHistory[] // Past & current team memberships
  marks              Mark?                @relation("StudentMarks")
  evaluations        Evaluation[]         @relation("StudentEvaluations")
  JoinRequest        JoinRequest[]

  leaderOf Team? @relation("TeamLeader")
}

model Team {
  id            String                  @id @unique @default(uuid())
  name          String
  students      StudentTeamHistory[] @relation("TeamStudents")
  leader        Student?             @relation("TeamLeader", fields: [leaderId], references: [id])
  leaderId      String?              @unique
  studentsCount Int                  @default(0)
  teamCode      String               @unique
  JoinRequest   JoinRequest[]
  projects      Project[]
  messages      Message[]            @relation("TeamMessages") // New relation for messages
}

model StudentTeamHistory {
  id        String   @id @unique @default(uuid())
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  team      Team    @relation("TeamStudents", fields: [teamId], references: [id])
  teamId    String
  resetId   Int
  joinedAt  DateTime @default(now())


  @@unique([studentId, teamId, resetId])
}

model JoinRequest {
  id        String   @id @default(uuid())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  status    String   @default("pending")
  createdAt DateTime @default(now())
}

model Project {
  id          Int      @id @unique @default(autoincrement())
  title       String
  description String
  technology  String[]
  status      Status
  gitHubLink  String   @default("")
  team        Team     @relation(fields: [teamId], references: [id])
  teamId      String
}

model Faculty {
  id          Int          @id @unique @default(autoincrement())
  user        User         @relation("FacultyRef", fields: [userId], references: [id])
  userId      String       @unique
  evaluations Evaluation[]
}

model Admin {
  id         Int        @id @unique @default(autoincrement())
  user       User       @relation("AdminRef", fields: [userId], references: [id])
  userId     String     @unique
  department Department
  resetId    Int        @default(1)
}

model Mark {
  id          Int          @id @unique @default(autoincrement())
  internal1   Int
  internal2   Int?
  external    Int?
  student     Student      @relation("StudentMarks", fields: [studentId], references: [id])
  studentId   String       @unique
  evaluations Evaluation[]
}

model Evaluation {
  id             Int      @id @unique @default(autoincrement())
  marks          Mark?    @relation(fields: [marksId], references: [id])
  marksId        Int?
  student        Student  @relation("StudentEvaluations", fields: [studentId], references: [id])
  studentId      String
  faculty        Faculty  @relation(fields: [facultyId], references: [id])
  facultyId      Int
  evaluationDate DateTime @default(now())
}

model Message {
  id         String   @id @unique @default(uuid())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  team       Team     @relation("TeamMessages", fields: [teamId], references: [id]) // Corrected relation
  teamId     String   // Ensures messages are linked to a team
  text       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

